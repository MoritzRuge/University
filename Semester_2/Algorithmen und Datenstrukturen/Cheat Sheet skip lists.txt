Cheat Sheet skip lists:
Core Idea
Apply this "express/local" concept to linked lists:

 - Create multiple layers of linked lists
 - Higher layers skip over elements (like express trains)
 - Lower layers contain more elements (like local trains)
 - Navigate efficiently by using the right "train" at each stage

Goal
Implement ordered dictionaries with linked list structures that allow:

 - Fast access by "skipping" unnecessary elements
 - Maintain ordered property for efficient range queries
 - Improve on the Ω(n) performance of standard linked lists

Express Lists:
Structure:
 - Start with a sorted linked list (L0) containing all entries
 - Add two pseudo-nodes at start (-∞) and end (∞) (HEAD and TAIL)
 - Create multiple "express" layers above:
	- L1: Contains every 2nd key from L0
	- L2: Contains every 4th key from L0
	- Li: Contains every 2^i key from L0
   - Each list Li contains approximately n/2^i keys
 - Continue until a layer has only the two pseudo-nodes

Visual Example:
L3: HEAD ----------------> 50 ------------------------> TAIL  ← Highest level
L2: HEAD --------> 30 ----> 50 -----------> 70 -------> TAIL
L1: HEAD --> 10 --> 30 ----> 50 --> 60 ----> 70 ------> TAIL
L0: HEAD --> 10 --> 30 --> 40 --> 50 --> 60 --> 70 ---> TAIL  ← Base level

General Look-up Algorithm:
 - Start at the head node of the highest list level
 - At current node:
   - If current.key == target key → Found!
   - If current.key < target key AND next.key <= target key → Go right
   - If current.key < target key AND next.key > target key → Go down
   - If current.key > target key → Element doesn't exist
 - Repeat until found or determined not present

Look-up Example for key 60:
 - Start at L3 HEAD: Move right to 50, see next is TAIL (> 60), go down
 - At L2, 50: Next is 70 (> 60), go down
 - At L1, 50: Next is 60 (= target), found!

Complexity Analysis:
 - Number of express lists: Θ(log n)
 - Look-up time: O(log n) average-case
 - Worst-case time: O(n) for pathological distributions
 - Total space complexity: O(n) - num of nodes

random Skip Lists:
Core Concept:
 - A randomized version of express lists
 - Instead of deterministically including every 2nd element in higher levels, use randomness
 - Maintains balanced structure in expected sense while simplifying operations

Structure Creation:
 - Start with base list L0 containing all elements
 - For each key k in L0:
   - Flip a coin until it comes up tails
   - Count number of heads j before first tails
   - Include k in lists L0, L1, L2, ..., Lj

Example Skip List (Random Result)
L3: HEAD ----------> 30 -------------------------------> TAIL
L2: HEAD ----------> 30 --------> 60 ----------------> TAIL
L1: HEAD --> 10 ---> 30 --------> 60 ---> 70 -------> TAIL
L0: HEAD --> 10 ---> 30 --> 40 --> 60 ---> 70 --> 80 --> TAIL

(Key 30 had 3 heads, 60 had 2 heads, 10 and 70 had 1 head, 40 and 80 had 0 heads)

Operations:
 - Lookup:
	- Follows same approach as express lists
	- Start at highest level, move right until next key > target
	- Move down and repeat until found or determined not present
	- May examine more than two nodes per level
 - Insert:
	1.Locate insertion position using lookup
	2.Flip coin until first tails appears
	3.Count number of heads (j)
	4.Insert key into lists L0, L1, ..., Lj
	5.Update pointers to maintain structure
 - Delete:
	1.Locate key using lookup
	2.Remove the key from all lists where it appears
	3.Update pointers to maintain structure

Key Advantages:
 - Maintains O(log n) expected search time
 - Simplifies insertion and deletion
 - Self-balancing through randomization
 - Each key treated independently
 - Structure adjusts automatically - no complex rebalancing needed

Implementation:
 - Every skip list consists of multiple linked lists which consits of nodes n.
 - for every node n in a linked list has:
   - key: k, Value: v
   - pred: Pointer to the previous node (horizontal)
   - succ/next: Pointer to the next node (horizontal)
   - down: Pointer to the corresponding (same) node in a linked List in the next lower level. (vertikal)
	down = NULL forall n if n_i in L0.
L2: HEAD(-∞) ------> N1(k1) -----------------------------------> TAIL(+∞)
     |                |                                            |
     v                v                                            v
L1: HEAD(-∞) ------> N1(k1) -------------> N3(k3) -------------> TAIL(+∞)
     |                 |                    |                      |
     v                 v                    v                      v
L0: HEAD(-∞) ------> N1(k1) --> N2(k2) --> N3(k3) --> N4(k4) --> TAIL(+∞)
 - Initialization:
   - Start with a single linked list L0
   - L0: initially contains only two pseudo-nodes:
     - HEAD: node with key -∞ (negative infinity)
     - TAIL node with key +∞ (positive infinity)
   - Higher levels are added as needed when elements are inserted
   - Navigation: Search, insert, and delete operations use both horizontal and vertical navigation

operations:
 - search(k): helper function for the main operations of a ATD.
   - Purpose: Finds predecessor nodes (or matching nodes) for key k in all levels
   - Returns: Stack of nodes, either:
     * Nodes with key k (if k exists in the skip list), or
     * Predecessor nodes (nodes with greatest key < k in each level)
   - Algorithm:
     * Start at the HEAD node of highest level
     * At each level, move right as far as possible without going past k
     * Add that node to stack, then move down one level
     * Repeat until reaching bottom level
   - Time Complexity: O(log n) expected
   - pseudocode:
	search(k):
	- k is the wanted node
	- n: current node
	- Q = newStack()
	- n = HEAD of highest node
	- while n != NULL:
		while n.next.k <= k:
			n = n.next
		Q.push(n)
		n = n.down
	- return Q

 - get(k): Retrieves the value associated with key k from a skip list
   - retrive the Stack of preds using search(k)
   - check top of the stack for the wanted node with key k.
     - if n.k == wanted key return that node
     - else throw an execption that the node with key k is not part of the skip list.
   - Time Complexity: O(log n) expected
   - Pseudocode:
  	Q <- search(k)
  	n <- Q.pop()
  	if n.k == k then
    		return n.v
  	else
    		throw NoSuchElementException

 - put(v,k):Inserts or updates a key-value pair
   - Algorithm:
     - Get predecessor nodes using search(k)
     - If key exists, update value
     - If not, insert new node after bottom predecessor
     - Use coin flips to determine promotion to higher levels
   - Time Complexity: O(log n) expected
   - Pseudocode:
	put(k, v):
  	Q <- search(k)
  	n <- Q.pop()
  	if n.next.k == k then
    		n.next.v <- v
    		return
  	insert a new node for (k, v) after n
  	while coinFlip() == heads do
    		if Q.isEmpty() then
      			create a new list with -INFTY, a node for k, +INFTY
      			create down links
    		else
     			n <- Q.pop()
      			insert a new node for k after n, add a down link

 - remove(k):
   - Purpose: Deletes key and its associated value from all levels
   - Algorithm:
     - Get predecessor nodes using search(k)
     - Check if key exists
     - Remove node from each level where it appears
     - Clean up any empty express lists
   - Time Complexity: O(log n) expected
   - Pseudocode:
	remove(k):
  	Q <- search(k)
  	n <- Q.pop()
  	if n.k != k then
    		throw NoSuchElementException
  	while n != NULL and n.k == k do
    		remove n from the list
    		if !Q.isEmpty() then
      			n <- Q.pop()
    		else
     			n <- NULL
  	remove pseudonodes for empty express lists, if necessary

Analysis and Performance Guarantees:

Space Complexity: O(n) expected number of key-nodes
Height: O(log n) expected number of express lists
Time Complexity Theorem (Satz 5.1):
	For any key k₀ and skip list with n entries, the expected number of steps (right and down movements) needed to locate k₀ is O(log n)
Worst-case Expected Analysis:
	Skip lists use randomization in their structure
	Analysis focuses on expected performance for worst-case inputs
	For every possible set of n entries, we analyze the expected running time and space, then take the maximum

Key Properties:
	Probabilistic alternative to balanced trees
	Maintains multiple sorted linked lists with decreasing density
	Randomized structure with deterministic search algorithm
	Height of a node is determined by coin flips (geometric distribution)
	Express lists act as "shortcuts" for faster traversal

Skip List Node Structure:
	Key and value
	Next pointer (same level)
	Down pointer (lower level)
	
