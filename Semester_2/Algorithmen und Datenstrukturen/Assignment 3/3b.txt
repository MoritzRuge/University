3b)
Annahme: Anzahl der Schwarzen Knoten in einem red-black-tree: 2^{s-1}  (Die in der Aufgabenstellenung gegebene Formel ist unserer Ansicht nach falsch angegeben, wie im Base-case zusehen ist.)
es gelten (i)-(iv) aus der Aufgabenstellung
base-case red-black-tree, s= 2 (leerer Baum mit Wurzel):
```
      r         | depth: 1 (root is black)
   /     \
  bn     bn     | depth: 2 (black null leaves)
```
nach (i) gilt: Num_blackNodes = 1
Num_blackNodes = 2^{2-1}-1 = 2^0 -1 = 2-1 = 1

Die Annahme gilt im Base-case 
Voraussetzung: die Formel 2^{s-1} -1 gilt für red-black-trees mit s = k schwarzer Tiefe.

I.S red-black-tree, mit s = k+1:
nach (i)-(iv) gilt:
- Die Wurzel ist Schwarz
- Jeder Teilbaum der Wurzel hat eine schwarze Tiefe von k.
- jeder Teilbaum hat nach Annahme mindestens 2^{k-1}-1 Schwarz Knoten
Num_blackNodes >= 1 + 2(2^{k-1}-1) = 1 + 2^1*2^{k-1} -2 = 2^k -1 | k = s-1
Num_blackNode >= 2^{s-1}-1

Die Formel aus der Annahme gilt auch im Induktionsschritt. 

Laut Definition ist die schwarze Tiefe die Anzahl der Schwarzen Knoten von der Wurzel, bis einem Blatt, wobei Blätter ebenfalls schwarz sind.
d.h für die Anzahl schwarzer Knoten im einem red-black-tree gilt: Num_blackNode >= h/2, wobei h die Höhe des gesamten Baumes ist.
daraus folgt: Num_blackNodes >= 2^{h/2 -1}-1 | nach h umformen:
h <= 2(log(Num_blackNodes +1)+1) rightarrow h <= 2(log(n +1)+1) die Dominate Komplexitätsklasse ist O((log n)) 
daher gilt für die Höhe eines red-black-tree h<= O(log(n))

Quellen:
https://medium.com/data-science/understanding-time-complexity-with-python-examples-2bda6e8158a7
https://www.geeksforgeeks.org/introduction-to-red-black-tree/#interesting-points-about-redblack-tree


